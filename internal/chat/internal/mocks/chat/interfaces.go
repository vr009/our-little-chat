// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chat/internal/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/chat/internal/interfaces.go -destination=internal/mocks/chat/internal/interfaces.go
//
// Package mock_internal is a generated GoMock package.
package chat

import (
	context "context"
	models "our-little-chatik/internal/chat/internal/models"
	models0 "our-little-chatik/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatRepo is a mock of ChatRepo interface.
type MockChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepoMockRecorder
}

// MockChatRepoMockRecorder is the mock recorder for MockChatRepo.
type MockChatRepoMockRecorder struct {
	mock *MockChatRepo
}

// NewMockChatRepo creates a new mock instance.
func NewMockChatRepo(ctrl *gomock.Controller) *MockChatRepo {
	mock := &MockChatRepo{ctrl: ctrl}
	mock.recorder = &MockChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepo) EXPECT() *MockChatRepoMockRecorder {
	return m.recorder
}

// AddUsersToChat mocks base method.
func (m *MockChatRepo) AddUsersToChat(ctx context.Context, chat models0.Chat, chatNames map[string]string, users ...models0.User) models0.StatusCode {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chat, chatNames}
	for _, a := range users {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUsersToChat", varargs...)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// AddUsersToChat indicates an expected call of AddUsersToChat.
func (mr *MockChatRepoMockRecorder) AddUsersToChat(ctx, chat, chatNames any, users ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chat, chatNames}, users...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToChat", reflect.TypeOf((*MockChatRepo)(nil).AddUsersToChat), varargs...)
}

// CreateChat mocks base method.
func (m *MockChatRepo) CreateChat(ctx context.Context, chat models0.Chat, chatNames map[string]string) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat, chatNames)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatRepoMockRecorder) CreateChat(ctx, chat, chatNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatRepo)(nil).CreateChat), ctx, chat, chatNames)
}

// DeleteChat mocks base method.
func (m *MockChatRepo) DeleteChat(ctx context.Context, chat models0.Chat) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chat)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatRepoMockRecorder) DeleteChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatRepo)(nil).DeleteChat), ctx, chat)
}

// DeleteMessage mocks base method.
func (m *MockChatRepo) DeleteMessage(ctx context.Context, message models0.Message) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, message)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockChatRepoMockRecorder) DeleteMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockChatRepo)(nil).DeleteMessage), ctx, message)
}

// FetchChatList mocks base method.
func (m *MockChatRepo) FetchChatList(ctx context.Context, user models0.User) ([]models0.ChatItem, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchChatList", ctx, user)
	ret0, _ := ret[0].([]models0.ChatItem)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// FetchChatList indicates an expected call of FetchChatList.
func (mr *MockChatRepoMockRecorder) FetchChatList(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchChatList", reflect.TypeOf((*MockChatRepo)(nil).FetchChatList), ctx, user)
}

// GetChat mocks base method.
func (m *MockChatRepo) GetChat(ctx context.Context, chat models0.Chat) (models0.Chat, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chat)
	ret0, _ := ret[0].(models0.Chat)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatRepoMockRecorder) GetChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatRepo)(nil).GetChat), ctx, chat)
}

// GetChatMessages mocks base method.
func (m *MockChatRepo) GetChatMessages(ctx context.Context, chat models0.Chat, opts models0.Opts) (models0.Messages, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", ctx, chat, opts)
	ret0, _ := ret[0].(models0.Messages)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockChatRepoMockRecorder) GetChatMessages(ctx, chat, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockChatRepo)(nil).GetChatMessages), ctx, chat, opts)
}

// RemoveUserFromChat mocks base method.
func (m *MockChatRepo) RemoveUserFromChat(ctx context.Context, chat models0.Chat, users ...models0.User) models0.StatusCode {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chat}
	for _, a := range users {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUserFromChat", varargs...)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// RemoveUserFromChat indicates an expected call of RemoveUserFromChat.
func (mr *MockChatRepoMockRecorder) RemoveUserFromChat(ctx, chat any, users ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chat}, users...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChat", reflect.TypeOf((*MockChatRepo)(nil).RemoveUserFromChat), varargs...)
}

// UpdateChatPhotoURL mocks base method.
func (m *MockChatRepo) UpdateChatPhotoURL(ctx context.Context, chat models0.Chat, photoURL string) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatPhotoURL", ctx, chat, photoURL)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// UpdateChatPhotoURL indicates an expected call of UpdateChatPhotoURL.
func (mr *MockChatRepoMockRecorder) UpdateChatPhotoURL(ctx, chat, photoURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatPhotoURL", reflect.TypeOf((*MockChatRepo)(nil).UpdateChatPhotoURL), ctx, chat, photoURL)
}

// MockQueueRepo is a mock of QueueRepo interface.
type MockQueueRepo struct {
	ctrl     *gomock.Controller
	recorder *MockQueueRepoMockRecorder
}

// MockQueueRepoMockRecorder is the mock recorder for MockQueueRepo.
type MockQueueRepoMockRecorder struct {
	mock *MockQueueRepo
}

// NewMockQueueRepo creates a new mock instance.
func NewMockQueueRepo(ctrl *gomock.Controller) *MockQueueRepo {
	mock := &MockQueueRepo{ctrl: ctrl}
	mock.recorder = &MockQueueRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueRepo) EXPECT() *MockQueueRepoMockRecorder {
	return m.recorder
}

// GetChatMessages mocks base method.
func (m *MockQueueRepo) GetChatMessages(chat models0.Chat, opts models0.Opts) (models0.Messages, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", chat, opts)
	ret0, _ := ret[0].(models0.Messages)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockQueueRepoMockRecorder) GetChatMessages(chat, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockQueueRepo)(nil).GetChatMessages), chat, opts)
}

// MockChatUseCase is a mock of ChatUseCase interface.
type MockChatUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChatUseCaseMockRecorder
}

// MockChatUseCaseMockRecorder is the mock recorder for MockChatUseCase.
type MockChatUseCaseMockRecorder struct {
	mock *MockChatUseCase
}

// NewMockChatUseCase creates a new mock instance.
func NewMockChatUseCase(ctrl *gomock.Controller) *MockChatUseCase {
	mock := &MockChatUseCase{ctrl: ctrl}
	mock.recorder = &MockChatUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUseCase) EXPECT() *MockChatUseCaseMockRecorder {
	return m.recorder
}

// AddUsersToChat mocks base method.
func (m *MockChatUseCase) AddUsersToChat(ctx context.Context, chat models0.Chat, users ...models0.User) models0.StatusCode {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chat}
	for _, a := range users {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUsersToChat", varargs...)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// AddUsersToChat indicates an expected call of AddUsersToChat.
func (mr *MockChatUseCaseMockRecorder) AddUsersToChat(ctx, chat any, users ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chat}, users...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToChat", reflect.TypeOf((*MockChatUseCase)(nil).AddUsersToChat), varargs...)
}

// CreateChat mocks base method.
func (m *MockChatUseCase) CreateChat(ctx context.Context, chat models.CreateChatRequest) (models0.Chat, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(models0.Chat)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatUseCaseMockRecorder) CreateChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatUseCase)(nil).CreateChat), ctx, chat)
}

// DeleteChat mocks base method.
func (m *MockChatUseCase) DeleteChat(ctx context.Context, chat models0.Chat) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChat", ctx, chat)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// DeleteChat indicates an expected call of DeleteChat.
func (mr *MockChatUseCaseMockRecorder) DeleteChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChat", reflect.TypeOf((*MockChatUseCase)(nil).DeleteChat), ctx, chat)
}

// DeleteMessage mocks base method.
func (m *MockChatUseCase) DeleteMessage(ctx context.Context, message models0.Message) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, message)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockChatUseCaseMockRecorder) DeleteMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockChatUseCase)(nil).DeleteMessage), ctx, message)
}

// GetChat mocks base method.
func (m *MockChatUseCase) GetChat(ctx context.Context, chat models0.Chat) (models0.Chat, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chat)
	ret0, _ := ret[0].(models0.Chat)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatUseCaseMockRecorder) GetChat(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatUseCase)(nil).GetChat), ctx, chat)
}

// GetChatList mocks base method.
func (m *MockChatUseCase) GetChatList(ctx context.Context, user models0.User) ([]models0.ChatItem, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatList", ctx, user)
	ret0, _ := ret[0].([]models0.ChatItem)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChatList indicates an expected call of GetChatList.
func (mr *MockChatUseCaseMockRecorder) GetChatList(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatList", reflect.TypeOf((*MockChatUseCase)(nil).GetChatList), ctx, user)
}

// GetChatMessages mocks base method.
func (m *MockChatUseCase) GetChatMessages(ctx context.Context, chat models0.Chat, opts models0.Opts) (models0.Messages, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", ctx, chat, opts)
	ret0, _ := ret[0].(models0.Messages)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockChatUseCaseMockRecorder) GetChatMessages(ctx, chat, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockChatUseCase)(nil).GetChatMessages), ctx, chat, opts)
}

// RemoveUserFromChat mocks base method.
func (m *MockChatUseCase) RemoveUserFromChat(ctx context.Context, chat models0.Chat, users ...models0.User) models0.StatusCode {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chat}
	for _, a := range users {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUserFromChat", varargs...)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// RemoveUserFromChat indicates an expected call of RemoveUserFromChat.
func (mr *MockChatUseCaseMockRecorder) RemoveUserFromChat(ctx, chat any, users ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chat}, users...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChat", reflect.TypeOf((*MockChatUseCase)(nil).RemoveUserFromChat), varargs...)
}

// UpdateChatPhotoURL mocks base method.
func (m *MockChatUseCase) UpdateChatPhotoURL(ctx context.Context, chat models0.Chat, photoURL string) models0.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatPhotoURL", ctx, chat, photoURL)
	ret0, _ := ret[0].(models0.StatusCode)
	return ret0
}

// UpdateChatPhotoURL indicates an expected call of UpdateChatPhotoURL.
func (mr *MockChatUseCaseMockRecorder) UpdateChatPhotoURL(ctx, chat, photoURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatPhotoURL", reflect.TypeOf((*MockChatUseCase)(nil).UpdateChatPhotoURL), ctx, chat, photoURL)
}

// MockUserDataInteractor is a mock of UserDataInteractor interface.
type MockUserDataInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataInteractorMockRecorder
}

// MockUserDataInteractorMockRecorder is the mock recorder for MockUserDataInteractor.
type MockUserDataInteractorMockRecorder struct {
	mock *MockUserDataInteractor
}

// NewMockUserDataInteractor creates a new mock instance.
func NewMockUserDataInteractor(ctrl *gomock.Controller) *MockUserDataInteractor {
	mock := &MockUserDataInteractor{ctrl: ctrl}
	mock.recorder = &MockUserDataInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataInteractor) EXPECT() *MockUserDataInteractorMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserDataInteractor) GetUser(user models0.User) (models0.User, models0.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(models0.User)
	ret1, _ := ret[1].(models0.StatusCode)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDataInteractorMockRecorder) GetUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDataInteractor)(nil).GetUser), user)
}
